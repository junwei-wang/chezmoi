#+TITLE: Doom Emacs Configuration
#+LAST_MODIFIED: [2021-11-08 Mon 14:27]
#+startup: fold
#+property: header-args:emacs-lisp :tangle yes :cache yes :results silent :comments link
#+property: header-args :tangle no :results silent

This is a liberate configuration for [[https://github.com/hlissner/doom-emacs][Doom Emacs]].

* Emacs configurations from others
** With Doom
- [[https://tecosaur.github.io/emacs-config/config.html][tecosaur]]
- [[https://www.cheng92.com/emacs/doom-emacs-with-org/][若叶知秋]]
- [[https://github.com/zzamboni/dot-doom/blob/master/doom.org][zzamboni/dot-doom]]
- [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]]
- [[https://www.gtrun.org/custom/config.html][GuangTao]]
** Without Doom

* Prerequisites
** Install necessary softwares

*** For MacOS

#+begin_src shell
# formatting
brew install tidy-html5          # html
brew install clang-format        # c/cpp
brew install stfmt               # shell

# mail
brew install isync mu

# fonts
brew install svn # needed for Font Merriweather
brew install font-jetbrains-mono font-merriweather font-juliamono font-alegreya
#+end_src

*** For Arch Linux

#+begin_src shell
yay -S mu mbsync-git     # for mu4e
#+end_src

** Refresh environment

#+begin_src shell
doom env refresh
#+end_src

** Install

#+begin_src emacs-lisp :tangle no
(pdf-tools-install)      ;; for pdftools
(plantuml-download-jar)  ;; for plantuml
(irony-install-server)   ;; for c/c++
#+end_src

#+begin_src bash
cmake -DCMAKE_INSTALL_PREFIX\=/Users/junwei/.emacs.d/.local/etc/irony-server/ -DLIBCLANG_LIBRARY\=/usr/local/opt/llvm/lib/libclang.dylib -DLIBCLANG_INCLUDE_DIR\=/usr/local/opt/llvm/include /Users/junwei/.emacs.d/.local/straight/build-27.1/irony/server && cmake --build . --use-stderr --config Release --target install
#+end_src

* Rudimentary configuration
:LOGBOOK:
CLOCK: [2021-02-16 Tue 11:40]
:END:
Make this file run (slightly) faster with lexical binding (see [[https://nullprogram.com/blog/2016/12/22/][this blog post]] for more info).

#+begin_src emacs-lisp :comments no
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!
#+end_src

** Personal Information
It's useful to have some basic personal information

#+begin_src emacs-lisp
;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Junwei Wang"
      user-mail-address "junwei.wang@cryptoexperts.com")
#+end_src

Apparently this is used by ~GPG~, and all sorts of other things.

#+begin_src emacs-lisp
(setq auth-sources '("~/.authinfo.gpg")
      auth-source-cache-expiry 14400)             ; default is 7200 (2h)
#+end_src

** Appearance
:LOGBOOK:
CLOCK: [2021-01-08 Fri 10:25]--[2021-01-08 Fri 10:50] =>  0:25
:END:

#+begin_src emacs-lisp
;; if started by emacs command or desktop file
;; open emacs in fullscreen
;; (toggle-frame-maximized)
;; (if (eq initial-window-system 'x)
;;     (toggle-frame-maximized)
;;   (toggle-frame-maximized))

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
{{ if (eq .chezmoi.hostname "neo") -}}
(setq doom-font (font-spec :family "JetBrains Mono" :size 19 :weight 'semi-light)
      doom-big-font (font-spec :family "JetBrains Mono" :size 24 :weight 'semi-light)
      doom-variable-pitch-font (font-spec :family "Overpass" :size 20)
      doom-unicode-font (font-spec :family "JuliaMono" :size 24)
      doom-serif-font (font-spec :family "IBM Plex Mono" :weight 'light))
{{ else -}}
(setq doom-font (font-spec :family "JetBrains Mono" :size 18 :weight 'semi-light)
      doom-big-font (font-spec :family "JetBrains Mono" :size 23 :weight 'semi-light)
      doom-variable-pitch-font (font-spec :family "Overpass" :size 19)
      doom-unicode-font (font-spec :family "JuliaMono" :size 24)
      doom-serif-font (font-spec :family "IBM Plex Mono" :weight 'light))
{{ end -}}
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :weight bold))
#+end_src

Whenever fonts are missing, after Doom's UI has initialized, a warning
listing the missing fonts should appear for at least half a second.

#+name: detect-missing-fonts
#+begin_src emacs-lisp :tangle no
(defvar required-fonts '("JetBrains Mono.*" "Overpass" "JuliaMono" "IBM Plex Mono" "Merriweather" "Alegreya"))

(defvar available-fonts
  (delete-dups (or (font-family-list)
                   (split-string (shell-command-to-string "fc-list : family")
                                 "[,\n]"))))

(defvar missing-fonts
  (delq nil (mapcar
             (lambda (font)
               (unless (delq nil (mapcar (lambda (f)
                                           (string-match-p (format "^%s$" font) f))
                                         available-fonts))
                 font))
             required-fonts)))

(if missing-fonts
    (pp-to-string
     `(unless noninteractive
        (add-hook! 'doom-init-ui-hook
          (run-at-time nil nil
                       (lambda ()
                         (message "%s missing the following fonts: %s"
                                  (propertize "Warning!" 'face '(bold warning))
                                  (mapconcat (lambda (font)
                                               (propertize font 'face 'font-lock-variable-name-face))
                                             ',missing-fonts
                                             ", "))
                         (sleep-for 0.5))))))
  ";; No missing fonts detected")
#+end_src

#+begin_src emacs-lisp :noweb no-export
<<detect-missing-fonts()>>
#+end_src

#+begin_src emacs-lisp
;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-vibrant)

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)
#+end_src

#+begin_src emacs-lisp :tangle "packages.el"
(package! all-the-icons-ivy)
#+end_src

#+begin_src emacs-lisp
;;; to integrate beautiful all-the-icons in ivy and cousel
(use-package! all-the-icons-ivy
  :after (all-the-icons ivy)
  :custom (all-the-icons-ivy-buffer-commands '(ivy-switch-buffer-other-window))
  :config
  (add-to-list 'all-the-icons-ivy-file-commands 'counsel-dired-jump)
  (add-to-list 'all-the-icons-ivy-file-commands 'counsel-find-library)
  (all-the-icons-ivy-setup))
#+end_src

** Others

#+begin_src emacs-lisp
(setq projectile-project-search-path '("~/git/" "~/github/" "~/github-jwang/" "~/projects/" "~/workspace/"))

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.

;;
;; global

;; basic settings
(setq-default delete-by-moving-to-trash t         ; Delete files to trash
              tab-width 4                         ; Set width for tabs
              uniquify-buffer-name-style 'forward ; Uniquify buffer names
              window-combination-resize t         ; take new window space from all other windows (not just current)
              x-stretch-cursor t                  ; Stretch cursor to the glyph width
              password-cache-expiry 3600          ; I can trust my computers ... can't I?
              scroll-margin 2                     ; It's nice to maintain a little margin
              show-trailing-whitespace 1
              )

(setq undo-limit 80000000                         ; Raise undo-limit to 80Mb
      evil-want-fine-undo t                       ; By default while in insert all changes are one big blob. Be more granular
      auto-save-default t                         ; Nobody likes to loose work, I certainly don't
      inhibit-compacting-font-caches t            ; When there are lots of glyphs, keep them in memory
      truncate-string-ellipsis "…")               ; Unicode ellispis are nicer than "...", and also save /precious/ space

(display-time-mode 1)                             ; Enable time in the mode-line
(unless (string-match-p "^Power N/A" (battery))
  (display-battery-mode 1))                       ; On laptops it's nice to know how much power you have
(global-subword-mode 1)                           ; Iterate through CamelCase words

;; editing
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; overwriting the value set by doom
(setq
 ;;  spelling
{{- if not (eq .chezmoi.hostname "neo") }}
 ispell-dictionary "en_US"
{{- end }}
 ispell-personal-dictionary "~/.aspell.en.pws"

 ;; neotree
 neo-hidden-regexp-list '("^\\." "\\.cs\\.meta$"
                          ;; Python
                          "\\.pyc$" "__pycache__" "\\.egg-info"
                          "~$" "^#.*#$" "\\.elc$"
                          ;; Latex
                          "\\.aux$" "\\.synctex\\.gz$" "\\.fls$" "\\.tdo$" "\\.bbl$" "\\.blg$")
 neo-window-fixed-size nil

 ;; calendar
 calendar-week-start-day 1)
#+end_src

** Formatting
#+begin_src emacs-lisp
        ;;;;;;;;;;;;;;; format
(setq +format-on-save-enabled-modes
      '(not emacs-lisp-mode  ; elisp's mechanisms are good enough
            sql-mode         ; sqlformat is currently broken
            latex-mode       ; by default, emacs-format-all-the-code use latexindent, but I want use auctex
            ))

(set-formatter! 'html-tidy  ; overwrite predefined html-tidy formatter
  '("tidy" "-q" "-indent"
    "--tidy-mark" "no"
    "--drop-empty-elements" "no"
    "--show-body-only" "auto"
    "--mute" "NESTED_EMPHASIS"
    ("--indent-spaces" "%d" tab-width)
    ("--indent-with-tabs" "%s" (if indent-tabs-mode "yes" "no"))
    ("-xml" (memq major-mode '(nxml-mode xml-mode))))
  :ok-statuses '(0 1))

(setq-hook! 'web-mode-hook +format-with 'prettier-prettify)
#+end_src

** LaTeX

#+begin_src emacs-lisp
;;;;;;;;;; LaTeX
;; indentation
;; (after! tex
;;   (setq-default TeX-master nil))
(after! latex
  (setq LaTeX-indent-level 2
        LaTeX-item-indent -2))
(mapc (lambda (mode) (add-hook 'LaTeX-mode-hook mode))
      (list 'auto-fill-mode
            'display-fill-column-indicator-mode))
(add-hook 'TeX-mode-hook (lambda () (set-fill-column 100)))
#+end_src

** Web

#+begin_src emacs-lisp
;;;;;;;;;; Web
;; indentation
(setq web-mode-markup-indent-offset 2
      web-mode-code-indent-offset 2
      web-mode-css-indent-offset 2)
#+end_src

** Python

I find this nice writing to read in the future: https://www.reddit.com/r/emacs/comments/ijmgtx/tip_how_to_use_a_stable_and_fast_environment_to/

#+begin_src emacs-lisp
;;;;;;;;;; Python
(mapc (lambda (mode) (add-hook 'python-mode-hook mode))
      (list 'py-autopep8-enable-on-save
            'display-fill-column-indicator-mode))
(add-hook 'python-mode-hook #'py-autopep8-enable-on-save)
(set-formatter! 'autopep8 'py-autopep8 :modes '(python-mode))
;; (add-hook 'python-mode-hook (lambda () (set-fill-column 100)))
#+end_src
** C++

Find this writing: https://www.reddit.com/r/emacs/comments/audffp/tip_how_to_use_a_stable_and_fast_environment_to/

** Org Mode

#+begin_src emacs-lisp
;;;;;;;;;; Orgmode
(setq org-directory "~/github/org/"

      org-enforce-todo-dependencies t
      org-log-done (quote time)
      org-log-redeadline (quote time)
      org-log-reschedule (quote time)

      org-startup-with-inline-images t  ;; show inline images when loading a new Org file

      ; org-export-with-broken-links 'mark
      org-export-with-broken-links t

      org-image-actual-width nil)

;; add new link types
(defun make-leetcode-link (leetcode-problem-name)
  (browse-url (concat "https://leetcode.com/problems/" leetcode-problem-name)))
(defun make-leetcode-submission-link (leetcode-problem-name)
  (browse-url (concat "https://leetcode.com/problems/" leetcode-problem-name "/submissions/")))
(defun make-leetcode-solution-link (leetcode-problem-name)
  (browse-url (concat "https://leetcode.com/problems/" leetcode-problem-name "/solution/")))
(defun make-eprint-link (eprint-id)
  (browse-url (concat "https://eprint.iacr.org/" eprint-id)))
(defun make-oeis-link (oeis-id)
  (browse-url (concat "https://oeis.org/" oeis-id)))
(after! org
  (org-add-link-type "leetcode" #'make-leetcode-link)
  (org-add-link-type "leetcode-submission" #'make-leetcode-submission-link)
  (org-add-link-type "IACR ePrint" #'make-eprint-link)
  (org-add-link-type "OEIS" #'make-oeis-link))


(add-hook! org-mode
  (defun jwang/update-modification-time ()
    (setq-local time-stamp-active t
                time-stamp-start "#\\+LAST_MODIFIED:[ \t]*"
                time-stamp-end "$"
                time-stamp-format "\[%Y-%02m-%02d %3a %02H:%02M\]")
    (add-hook 'before-save-hook 'time-stamp nil 'local)))
#+end_src

*** Agenda

#+begin_src emacs-lisp
(setq
 org-agenda-files (list "~/github/org"
                        "~/github/org/roam/daily"
                        "~/github/org/roam/to_handle_over.org")
 org-agenda-custom-commands
 '(("B" "Biweekly Team Meeting"
    ((agenda "" ((org-agenda-span 14)
                 (org-agenda-start-day "-13d"))))
    ((org-agenda-compact-blocks t))) ;; options set here apply to the entire block
   ("d" "today's agenda"
    ((agenda "" ((org-agenda-span 1)
                 (org-agenda-start-day "0d"))))
    ((org-agenda-compact-blocks t)))
   ("c" "Simple agenda view"
    ((tags "PRIORITY=\"A\""
           ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo '("DONE")))
            (org-agenda-overriding-header "High-priority unfinished tasks:")))
     (agenda "")
     (alltodo ""
              ((org-agenda-skip-function
                '(or (jwang-org-skip-subtree-if-priority ?A)
                     ;; (org-agenda-skip-if nil '(scheduled deadline))
                     ))))
     ))))

(defun jwang-org-skip-subtree-if-habit ()
  "Skip an agenda entry if it has a STYLE property equal to \"habit\"."
  (let ((subtree-end (save-excursion (org-end-of-subtree t))))
    (if (string= (org-entry-get nil "STYLE") "habit")
        subtree-end
      nil)))

(defun jwang-org-skip-subtree-if-priority (priority)
  "Skip an agenda subtree if it has a priority of PRIORITY.

PRIORITY may be one of the characters ?A, ?B, or ?C."
  (let ((subtree-end (save-excursion (org-end-of-subtree t)))
        (pri-value (* 1000 (- org-lowest-priority priority)))
        (pri-current (org-get-priority (thing-at-point 'line t))))
    (if (= pri-value pri-current)
        subtree-end
      nil)))
#+end_src

*** Noter

#+begin_src emacs-lisp
(setq org-noter-always-create-frame nil)
#+end_src

*** LaTeX
#+begin_src emacs-lisp
;;;;;;;;;; Org LaTeX
;;; https://emacs.stackexchange.com/a/41187
;;;; (add-to-list 'org-latex-packages-alist "~/github/org/latex/mymacros.sty")
#+end_src

**** Export

#+begin_src emacs-lisp
(setq
 org-latex-compiler "lualatex"
 ;;org-latex-pdf-process '("latexmk -f -pdflua -%latex -interaction=nonstopmode -output-directory=%o %f"))
 )
#+end_src

*** Org Roam

#+begin_src emacs-lisp
;;;;;;;;;; Org-Roam v2
(setq org-roam-v2-ack t
      org-roam-directory (file-truename "~/github/org/roam")

      org-roam-dailies-capture-templates
      '(("d" "default" entry "* %<%I:%M %p>: %?"
         :target (file+head "%<%Y-%m-%d>.org"
                            "#+title: %<%Y-%m-%d>\n")))
      )

(use-package! org-roam-ui
  :after org-roam
  :commands org-roam-ui-open
  :hook (org-roam . org-roam-ui-mode)
  :config
  (require 'org-roam) ; in case autoloaded
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t)
  (defun org-roam-ui-open ()
    "Ensure the server is active, then open the roam graph."
    (interactive)
    (unless org-roam-ui-mode (org-roam-ui-mode 1))))

(map! :leader
      (:prefix ("r" . "Org Roam")
       :desc "Find roam node" "f" #'org-roam-node-find
       :desc "Insert roam node" "i" #'org-roam-node-insert))

(use-package! websocket
    :after org-roam)

(use-package! org-roam-bibtex
  :after org-roam
  :config
  (require 'org-ref)
  (org-roam-bibtex-mode))

(use-package! orb-book
  :after (org-roam org-roam-bibtex))

(setq orb-preformat-keywords '("year" "citekey" "title" "author" "file"))
(setq org-roam-capture-templates
      '(("d" "default" plain "%?"
         :target (file+head "${slug}.org"
                            "#+TITLE: ${title}\n#+CREATED: %U\n#+LAST_MODIFIED: %U\n#+FILETAGS: ${filetags}\n\n")
         :unnarrowed t)
        ("b" "bibliography reference" plain
         (file "~/github/org/templates/orb.org")
         :if-new
         (file+head "biblio/${citekey}.org"
                    "#+TITLE: ${year} - [${citekey}] - ${title} -- ${author}\n")
         :unnarrowed t)
        ("r" "Reading List")
        ("rb" "Books  (Reading List)" entry "* TODO %?"
         :target (file+olp "reading_list.org" ("Books"))
         :unnarrowed t)
        ("rg" "Blogs  (Reading List)" entry "* TODO %?"
         :target (file+olp "reading_list.org" ("Blogs"))
         :unnarrowed t)
        ("rp" "Papers (Reading List)" entry "* TODO %?"
         :target (file+olp "reading_list.org" ("Papers"))
         :unnarrowed t)
        ("ro" "Others (Reading List)" entry "* TODO %?"
         :target (file+olp "reading_list.org" ("Others"))
         :unnarrowed t)
        ("c" "cocktail" plain
         (file "~/github/org/templates/cocktail.org")
         :if-new
         (file+head "cocktail/${slug}.org"
                    "#+TITLE: ${title}\n#+CREATED: %U\n#+LAST_MODIFIED: %U\n#+FILETAGS: :cocktail:${filetags}:\n\n")
         :unnarrowed t)
        ("l" "LeetCode" plain
         (function org-roam-capture--get-point)
         (file "~/github/org/templates/org-roam-leetcode.org")
         :file-name "leetcode/${slug}"
         :head "#+TITLE: ${title}\n"
         :unnarrowed t)))

(defun my/org-id-update-org-roam-files ()
  "Update Org-ID locations for all Org-roam files."
  (interactive)
  (org-id-update-id-locations (org-roam--list-all-files)))

(defun my/org-id-update-id-current-file ()
  "Scan the current buffer for Org-ID locations and update them."
  (interactive)
  (org-id-update-id-locations (list (buffer-file-name (current-buffer)))))

#+end_src

#+begin_src emacs-lisp
;;;; Org-Roam v1
;; (setq org-roam-graph-viewer "/Applications/Firefox.app/Contents/MacOS/firefox")

(setq orb-preformat-keywords '("year" "citekey" "title" "author")
      orb-templates '(("r" "ref" plain
                       (function org-roam-capture--get-point)
                       (file "~/github/org/templates/orb.org")
                       :file-name "biblio/${citekey}"
                       :head "#+TITLE: ${year} - [${citekey}] - ${title} -- ${author}\n"
                       :unnarrowed t)))

;;;;;;;;; Bibliography
;;; helm-bibtex

(defun bibtex-completion-format-citation-orb-cite (keys)
  "Format org-roam-bibtex cite references for keys in KEYS."
  (s-join ", "
          (--map (format "cite:%s" it) keys)))
(setq orb-book-bibliography "~/github/org/biblio/book.bib"

      ;;; for bibtex-completion
      bibtex-completion-bibliography (list
                                      "~/.cb/cryptobib/crypto.bib"
                                       "~/github/org/biblio/thesis.bib"
                                       orb-book-bibliography
                                       "~/github/org/biblio/course.bib"
                                       "~/github/org/biblio/misc.bib"
                                       "~/github/org/biblio/temp.bib"
                                       "~/github/org/biblio/tifs.bib"
                                       "~/github/org/biblio/crxwork/wheely.bib")
      bibtex-completion-library-path '("~/github/org/biblio/pdfs")

      ;;; org-cite: newly introduced in org v9.5
      org-cite-global-bibliography bibtex-completion-bibliography

      bibtex-completion-format-citation-functions
      '((org-mode      . bibtex-completion-format-citation-orb-cite)
        (latex-mode    . bibtex-completion-format-citation-cite)
        (markdown-mode . bibtex-completion-format-citation-pandoc-citeproc)
        (python-mode   . bibtex-completion-format-citation-sphinxcontrib-bibtex)
        (rst-mode      . bibtex-completion-format-citation-sphinxcontrib-bibtex)
        (default       . bibtex-completion-format-citation-default)))


;;; org-ref
(setq reftex-default-bibliography bibtex-completion-bibliography
      ;; show broken links is slow in large files
      org-ref-show-broken-links nil)

;; org-ref
(setq org-ref-completion-library 'org-ref-ivy-cite)

;; see org-ref for use of these variables
(setq org-ref-bibliography-notes "~/github/org/biblio/notes.org"
      org-ref-default-bibliography bibtex-completion-bibliography
      org-ref-pdf-directory "~/github/org/biblio/pdfs")

;;;;;;;;;; Org-Noter
(setq org-noter-notes-search-path '(org-directory
                                    "~/github/org/roam/biblio"))
#+end_src
*** Org publish

#+begin_src emacs-lisp
(setq org-publish-project-alist
      '(("Hands-on Applied Crypto"
         :base-directory "~/github/junwei-wang/hands-on-applied-crypto/"
         :publishing-function org-html-publish-to-html
         :publishing-directory "~/github/junwei-wang/hands-on-applied-crypto/docs"
         :html-head-include-scripts nil        ;Disable the default javascript snippet
         :html-head-include-default-style nil  ;Disable the default css style
         :section-numbers nil
         :table-of-contents nil
         :html-head "<link href=\"https://fonts.googleapis.com/css2?family=Inconsolata:wght@400;700&display=swap\" rel=\"stylesheet\">
    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css\" integrity=\"sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2\" crossorigin=\"anonymous\">
    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.4.1/font/bootstrap-icons.css\">
    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/gh/jpswalsh/academicons@1/css/academicons.min.css\">
    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/brands.min.css\">
    <link rel=\"stylesheet\" href=\"https://jwa.ng/sass/researcher.min.css\">"
         )
        ("Org Roam"
         :base-directory "~/github/org/roam/"
         :publishing-function org-html-publish-to-html
         :publishing-directory "~/github/org/roam-publishing-html"
    ;     :html-head-include-scripts nil        ;Disable the default javascript snippet
    ;     :html-head-include-default-style nil  ;Disable the default css style
    ;     :section-numbers nil
    ;     :table-of-contents nil
    ;;      :html-head "<link href=\"https://fonts.googleapis.com/css2?family=Inconsolata:wght@400;700&display=swap\" rel=\"stylesheet\">
    ;; <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css\" integrity=\"sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2\" crossorigin=\"anonymous\">
    ;; <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.4.1/font/bootstrap-icons.css\">
    ;; <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/gh/jpswalsh/academicons@1/css/academicons.min.css\">
    ;; <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/brands.min.css\">
    ;; <link rel=\"stylesheet\" href=\"https://jwa.ng/sass/researcher.min.css\">"
         )
        ))
#+end_src

*** Org Export
**** HTML
***** MathJax

#+begin_src emacs-lisp
(setq org-html-mathjax-options
      '((path "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-svg.js" )
        (scale "1")
        (autonumber "ams")
        (multlinewidth "85%")
        (tagindent ".8em")
        (tagside "right")))

(setq org-html-mathjax-template
      "<script>
<!--/*--><![CDATA[/*><!--*/
MathJax = {
  chtml: {
    scale: %SCALE
  },
  svg: {
    scale: %SCALE,
    fontCache: \"global\"
  },
  tex: {
    tags: \"%AUTONUMBER\",
    multlineWidth: \"%MULTLINEWIDTH\",
    tagSide: \"%TAGSIDE\",
    tagIndent: \"%TAGINDENT\",
    macros: {
      // algorithms
      KeyGen: \"\\\\mathsf{KeyGen}\",
      Enc: \"\\\\mathsf{Enc}\",
      Dec: \"\\\\mathsf{Dec}\",
      pk: \"\\\\mathsf{pk}\",
      sk: \"\\\\mathsf{sk}\",
      pt: \"\\\\mathsf{pt}\",
      ct: \"\\\\mathsf{ct}\",
      // spaces
      M: \"\\\\mathcal{M}\",
      K: \"\\\\mathcal{K}\",
      C: \"\\\\mathcal{C}\",
      // complexity class
      P: \"\\\\mathsf{P}\",
      // complexity
      poly: \"\\\\mathsf{poly}\",
      negl: \"\\\\mathsf{negl}\",
      // adversary, algorithm
      A: \"\\\\mathcal{A}\",
      // math symbols
      concat: \"\\\\parallel\",
      divides: \"\\\\mid\",
      notdivides: \"\\\\nmid\",
      qed: \"    \\\\blacksquare\",
      defeq: \":=\",
      gcd: \"\\\\mathrm{gcd}\",
      sample: \"\\\\gets_{\\\\$}\",
      // prob and statistics
      H: \"\\\\mathrm{H}\",    // entropy
      MI: \"\\\\mathrm{MI}\",  // mutual information
      pdf: \"\\\\mathrm{pdf}\",
      // sets
      ZZ: \"\\\\mathbb{Z}\",
      CC: \"\\\\mathbb{C}\",
      RR: \"\\\\mathbb{R}\",
      FF: \"\\\\mathbb{F}\"
    }
  }
};
/*]]>*///-->
</script>
<script id=\"MathJax-script\" async
        src=\"%PATH\"></script>")
#+end_src
*** Org Contact

#+begin_src emacs-lisp
(use-package! org-contacts
  :ensure nil
  :after org
  :custom (org-contacts-files `(,(concat org-directory "contacts.org"))))

(use-package! org-capture
  :ensure nil
  :after org
  :preface
  (defvar jwang/org-contacts-template "* %(org-contacts-template-name)
:PROPERTIES:
:ADDRESS: %^{ADDRESS}
:BIRTHDAY: %^{yyyy-mm-dd}
:EMAIL: %(org-contacts-template-email)
:NOTE: %^{NOTE}
:END:" "Template for org-contacts.")
  :custom
  (org-capture-templates
   `(("c" "Contact" entry (file "~/github/org/contacts.org"),
      jwang/org-contacts-template
      :empty-lines 1))))
#+end_src

** Email

Create folder for ~mbsync~
#+begin_src shell
mkdir ~/.mbsync && cd .mbsync
mkdir gmail-wakemecn && mkdir CRX && mkdir JWA.NG
mbsync -a
#+end_src
Then index them by
#+begin_src shell
mu init --maildir=~/.mbsync \
    --my-address=junwei.wang@cryptoexperts.com \
    --my-address=wakemecn@gmail.com \
    --my-address=me@jwa.ng \
    --my-address=i.junwei.wang@gmail.com
mu index
#+end_src

#+begin_src emacs-lisp
;;;;;;;;; MU4E
{{- if (eq .chezmoi.hostname "neo") }}
(add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
{{- else if (eq .chezmoi.os "darwin") }}
(add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu/mu4e")
{{- end }}

(after! mu4e
  (setq
   ;; basic
   mu4e-maildir (expand-file-name "~/.mbsync")
   +mu4e-mu4e-mail-path (expand-file-name "~/.mbsync")
   ;; mu4e-get-mail-command "mbsync -c ~/.mbsyncrc -a"
   mu4e-update-interval 180


   ;; view
   mu4e-view-prefer-html t
   mu4e-headers-auto-update t
   mu4e-view-show-images t                 ;; enable inline images
   mu4e-view-show-addresses 't             ;; show full addresses in view message (instead of just names)
                                           ;; toggle per name with M-RET

   mu4e-headers-fields '((:account-stripe . 1)
                         (:human-date     . 12)
                         (:flags          . 6)
                         (:from-or-to     . 22)
                         (:subject        . nil) ;; alternatively, use :thread-subject
                        )


   ;; compose
   ;; mu4e-html2text-command "w3m -T text/html" ;;using the default mu4e-shr2text
   ;; mu4e-compose-signature-auto-include nil
   mu4e-compose-format-flowed t
   mu4e-compose-in-new-frame t             ;; every new email composition gets its own frame!
   org-mu4e-convert-to-html t              ;; convert org mode to HTML automatically
   mu4e-sent-messages-behavior 'delete     ;; don't save message to Sent Messages, IMAP takes care of this

   ;; move
   mu4e-change-filenames-when-moving t     ;; avoid mail syncing issue when using mbsync
   mu4e-sent-messages-behavior 'delete     ;; don't save message to Sent Messages, IMAP takes care of this

   ;; mu4e-context
   mu4e-context-policy 'pick-first
   mu4e-compose-context-policy 'always-ask

   mu4e-confirm-quit nil                   ;; don't ask when quitting
   )

  (add-to-list 'mu4e-view-actions
               '("ViewInBrowser" . mu4e-action-view-in-browser) t))

;; use imagemagick, if available
(when (fboundp 'imagemagick-register-types)
  (imagemagick-register-types))

(add-hook 'mu4e-view-mode-hook #'visual-line-mode)

;; <tab> to navigate to links, <RET> to open them in browser
(add-hook 'mu4e-view-mode-hook
          (lambda()
            ;; try to emulate some of the eww key-bindings
            (local-set-key (kbd "<RET>") 'mu4e~view-browse-url-from-binding)
            (local-set-key (kbd "<tab>") 'shr-next-link)
            (local-set-key (kbd "<backtab>") 'shr-previous-link)))




;;set up queue for offline email
;;use mu mkdir  ~/.maildir/$ACCOUNT/queue to set up first
(setq smtpmail-queue-mail nil)  ;; start in normal mode

(after! mu4e-context
  :config
  (setq mu4e-contexts
        (list
         (make-mu4e-context
          :name "CRX" ;; for CRX mail
          :enter-func (lambda () (mu4e-message "Entering context [CRX]"))
          :leave-func (lambda () (mu4e-message "Leaving context [CRX]"))
          :match-func (lambda (msg)
                        (when msg
                          (mu4e-message-contact-field-matches
                           msg '(:from :to :cc :bcc) "junwei.wang@cryptoexperts.com")))
          :vars '((user-mail-address . "junwei.wang@cryptoexperts.com")
                  (user-full-name . "Junwei Wang")
                  (mu4e-sent-folder . "/CRX/Sent Mail")
                  (mu4e-drafts-folder . "/CRX/drafts")
                  (mu4e-trash-folder . "/CRX/Trash")
                  (mu4e-compose-signature . (concat "Informal Signature\n" "Emacs is awesome!\n"))
                  (mu4e-compose-format-flowed . t)
                  (smtpmail-queue-dir . "~/.maildir/CRX/queue/cur")
                  (message-send-mail-function . smtpmail-send-it)
                  (smtpmail-smtp-user . "junwei.wang@cryptoexperts.com")
                  (smtpmail-starttls-credentials . (("smtp.gmail.com" 587 nil nil)))
                  (smtpmail-auth-credentials . (expand-file-name "~/.authinfo.gpg"))
                  (smtpmail-default-smtp-server . "smtp.gmail.com")
                  (smtpmail-smtp-server . "smtp.gmail.com")
                  (smtpmail-smtp-service . 587)
                  (smtpmail-debug-info . t)
                  (smtpmail-debug-verbose . t)
                  (mu4e-maildir-shortcuts . ( ("/CRX/INBOX"     . ?i)
                                              ("/CRX/Sent Mail" . ?s)
                                              ("/CRX/Trash"     . ?t)
                                              ("/CRX/All Mail"  . ?a)
                                              ("/CRX/Starred"   . ?r)
                                              ("/CRX/drafts"    . ?d)
                                              ))))
         (make-mu4e-context
          :name "WAKEMECN" ;;for gmail-wakemecn
          :enter-func (lambda () (mu4e-message "Entering context [wakemecn]"))
          :leave-func (lambda () (mu4e-message "Leaving context [wakemecn]"))
          :match-func (lambda (msg)
                        (when msg
                          (mu4e-message-contact-field-matches
                           msg '(:from :to :cc :bcc) "wakemecn@gmail.com")))
          :vars '((user-mail-address . "wakemecn@gmail.com")
                  (user-full-name . "Junwei Wang")
                  (mu4e-sent-folder . "/gmail-wakemecn/Sent Mail")
                  (mu4e-drafts-folder . "/gmail-wakemecn/drafts")
                  (mu4e-trash-folder . "/gmail-wakemecn/Trash")
                  (mu4e-compose-signature . (concat "Formal Signature\n" "Emacs 27.1, org-mode 10, mu4e 1.4\n"))
                  (mu4e-compose-format-flowed . t)
                  (smtpmail-queue-dir . "~/.maildir/gmail-wakemecn/queue/cur")
                  (message-send-mail-function . smtpmail-send-it)
                  (smtpmail-smtp-user . "wakemecn")
                  (smtpmail-starttls-credentials . (("smtp.gmail.com" 587 nil nil)))
                  (smtpmail-auth-credentials . (expand-file-name "~/.authinfo.gpg"))
                  (smtpmail-default-smtp-server . "smtp.gmail.com")
                  (smtpmail-smtp-server . "smtp.gmail.com")
                  (smtpmail-smtp-service . 587)
                  (smtpmail-debug-info . t)
                  (smtpmail-debug-verbose . t)
                  (mu4e-maildir-shortcuts . ( ("/gmail-wakemecn/INBOX"     . ?i)
                                              ("/gmail-wakemecn/Sent Mail" . ?s)
                                              ("/gmail-wakemecn/Trash"     . ?t)
                                              ("/gmail-wakemecn/All Mail"  . ?a)
                                              ("/gmail-wakemecn/Starred"   . ?r)
                                              ("/gmail-wakemecn/drafts"    . ?d)
                                              ))))
         (make-mu4e-context
          :name "ME" ;; for me@jwa.ng
          :enter-func (lambda () (mu4e-message "Entering context [ME]"))
          :leave-func (lambda () (mu4e-message "Leaving context [ME]"))
          :match-func (lambda (msg)
                        (when msg
                          (mu4e-message-contact-field-matches
                           msg '(:from :to :cc :bcc) "me@jwa.ng")))
          :vars '((user-mail-address . "me@jwa.ng")
                  (user-full-name . "Junwei Wang")
                  (mu4e-sent-folder . "/JWA.NG/Sent Mail")
                  (mu4e-drafts-folder . "/JWA.NG/drafts")
                  (mu4e-trash-folder . "/JWA.NG/Trash")
                  (mu4e-compose-signature . (concat "Formal Signature\n" "Emacs 27.1, org-mode 10, mu4e 1.4\n"))
                  (mu4e-compose-format-flowed . t)
                  (smtpmail-queue-dir . "~/.maildir/JWA.NG/queue/cur")
                  (message-send-mail-function . smtpmail-send-it)
                  (smtpmail-smtp-user . "jwang@mailbox.org")
                  (smtpmail-starttls-credentials . (("smtp.mailbox.org" 587 nil nil)))
                  (smtpmail-auth-credentials . (expand-file-name "~/.authinfo.gpg"))
                  (smtpmail-default-smtp-server . "smtp.mailbox.org")
                  (smtpmail-smtp-server . "smtp.mailbox.org")
                  (smtpmail-smtp-service . 587)
                  (smtpmail-debug-info . t)
                  (smtpmail-debug-verbose . t)
                  (mu4e-maildir-shortcuts . ( ("/JWA.NG/INBOX"     . ?i)
                                              ("/JWA.NG/Sent Mail" . ?s)
                                              ("/JWA.NG/Trash"     . ?t)
                                              ("/JWA.NG/All Mail"  . ?a)
                                              ("/JWA.NG/Starred"   . ?r)
                                              ("/JWA.NG/drafts"    . ?d)
                                              ))))
         )))
#+end_src
** TODO Web searching

To add google search of selected texts

#+begin_src emacs-lisp
;; use google instead duckduckgo for searching
(setq counsel-search-engine 'google)

(defun jwang/get-selected-text (start end)
  (interactive "r")
  (if (use-region-p)
      (buffer-substring start end)))

(defun jwang/search-selected-or-type (start end)
  (interactive "r")
  (if (use-region-p)
      (counsel-search-action (buffer-substring start end))
    (counsel-search)))

(defun jwang/search-org-heading ()
  (interactive)
  (if (string= mode-name "Org")
      (counsel-search-action (org-get-heading t t t t))
    (counsel-search)))

(map! :leader
      (:prefix "s"
      :desc "Google selected or type"
       "g" #'jwang/search-selected-or-type
      :desc "Google org heading"
       "h" #'jwang/search-org-heading))
#+end_src

** Doom configuration
*** Modules
:PROPERTIES:
:header-args:emacs-lisp: :tangle no
:END:

#+name: init.el
#+begin_src emacs-lisp :tangle "init.el" :noweb no-export :comments none
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a "Module Index" link where you'll find
;;      a comprehensive list of Doom's modules and what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).

(doom! :input
       <<doom-input>>

       :completion
       <<doom-completion>>

       :ui
       <<doom-ui>>

       :editor
       <<doom-editor>>

       :emacs
       <<doom-emacs>>

       :term
       <<doom-term>>

       :checkers
       <<doom-checkers>>

       :tools
       <<doom-tools>>

       :os
       <<doom-os>>

       :lang
       <<doom-lang>>

       :email
       <<doom-email>>

       :app
       <<doom-app>>

       :config
       literate
       (default +bindings +smartparens))
#+end_src

**** Interface
#+name: doom-input
#+begin_src emacs-lisp
chinese
;;japanese
;;layout            ; auie,ctsrnm is the superior home row
#+end_src

#+name: doom-completion
#+begin_src emacs-lisp
(company             ; the ultimate code completion backend
 ;; +childframe
 )
;;helm              ; the *other* search engine for love and life
;;ido               ; the other *other* search engine...
ivy                 ; a search engine for love and life
(vertico +icons)    ; the search engine of the future
#+end_src

#+name: doom-ui
#+begin_src emacs-lisp
deft                ; notational velocity for Emacs
doom                ; what makes DOOM look the way it does
doom-dashboard      ; a nifty splash screen for Emacs
doom-quit           ; DOOM quit-message prompts when you quit Emacs
(emoji +unicode)    ; 🙂
hl-todo             ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
;;hydra
indent-guides       ; highlighted indent columns
ligatures           ; ligatures and symbols to make your code pretty again
minimap             ; show a map of the code on the side
modeline            ; snazzy, Atom-inspired modeline, plus API
nav-flash           ; blink cursor line after big motions
neotree             ; a project drawer, like NERDTree for vim
ophints             ; highlight the region an operation acts on
(popup +defaults)   ; tame sudden yet inevitable temporary windows
;;tabs              ; a tab bar for Emacs
;;treemacs          ; a project drawer, like neotree but cooler
unicode             ; extended unicode support for various languages
vc-gutter           ; vcs diff in the fringe
vi-tilde-fringe     ; fringe tildes to mark beyond EOB
(window-select      ; visually switch windows
 +numbers)
;;window-select     ; visually switch windows
workspaces          ; tab emulation, persistence & separate workspaces
zen                 ; distraction-free coding or writing
#+end_src

#+name: doom-editor
#+begin_src emacs-lisp
(evil +everywhere)  ; come to the dark side, we have cookies
file-templates      ; auto-snippets for empty files
fold                ; (nigh) universal code folding
(format +onsave)    ; automated prettiness
;;god               ; run Emacs commands without modifier keys
;;lispy             ; vim for lisp, for people who don't like vim
multiple-cursors    ; editing in many places at once
;;objed             ; text object editing for the innocent
;;parinfer          ; turn lisp into python, sort of
rotate-text         ; cycle region at point between text candidates
snippets            ; my elves. They type so I don't have to
;;word-wrap         ; soft wrapping with language-aware indent
#+end_src

#+name: doom-emacs
#+begin_src emacs-lisp
(dired +icons)      ; making dired pretty [functional]
electric            ; smarter, keyword-based electric-indent
(ibuffer +icons)    ; interactive buffer management
(undo +tree)        ; persistent, smarter undo for your inevitable mistakes
vc                  ; version-control and Emacs, sitting in a tree
#+end_src

#+name: doom-term
#+begin_src emacs-lisp
;;eshell            ; the elisp shell that works everywhere
;;shell             ; simple shell REPL for Emacs
;;term              ; basic terminal emulator for Emacs
vterm               ; the best terminal emulation in Emacs
#+end_src

#+name: doom-checkers
#+begin_src emacs-lisp
(syntax             ; tasing you for every semicolon you forget
 +everywhere)
(spell              ; tasing you for misspelling mispelling
 +aspell            ; use aspell as a backend for correcting words.
 +everywhere)       ; spell check in programming modes as well (in comments)
grammar             ; tasing grammar mistake every you make
#+end_src

#+name: doom-tools
#+begin_src emacs-lisp
;;ansible
biblio
;;debugger          ; FIXME stepping through code, to help you add bugs
;;direnv
docker
editorconfig        ; let someone else argue about tabs vs spaces
;;ein               ; tame Jupyter notebooks with emacs
(eval +overlay)     ; run code, run (also, repls)
;;gist              ; interacting with github gists
(lookup             ; navigate your code and its documentation
 +dictionary        ; enable word definition and thesaurus lookup functionality
 +docsets)          ; enable integration with Dash.app docsets
lsp
magit               ; a git porcelain for Emacs
make                ; run make tasks from Emacs
pass                ; password manager for nerds
pdf                 ; pdf enhancements
;;prodigy           ; FIXME managing external services & code builders
rgb               ; creating color strings
;;taskrunner        ; taskrunner for all your projects
;;terraform         ; infrastructure as code
;;tmux              ; an API for interacting with tmux
upload            ; map local to remote projects via ssh/ftp
#+end_src

#+name: doom-os
#+begin_src emacs-lisp
(:if IS-MAC macos)  ; improve compatibility with macOS
tty                 ; improve the terminal Emacs experience
#+end_src
**** Language support
#+name: doom-lang
#+begin_src emacs-lisp
;;agda              ; types of types of types of types...
;;beancount         ; mind the GAAP
cc                  ; C/C++/Obj-C madness
;;clojure           ; java with a lisp
;;common-lisp       ; if you've seen one lisp, you've seen them all
;;coq               ; proofs-as-programs
;;crystal           ; ruby at the speed of c
;;csharp            ; unity, .NET, and mono shenanigans
data                ; config/data formats
;;(dart +flutter)   ; paint ui and not much else
;;dhall
;;elixir            ; erlang done right
;;elm               ; care for a cup of TEA?
emacs-lisp          ; drown in parentheses
;;erlang            ; an elegant language for a more civilized age
;;ess               ; emacs speaks statistics
;;factor
;;faust             ; dsp, but you get to keep your soul
;;fsharp            ; ML stands for Microsoft's Language
;;fstar             ; (dependent) types and (monadic) effects and Z3
;;gdscript          ; the language you waited for
;;(go +lsp)         ; the hipster dialect
(haskell +lsp)      ; a language that's lazier than I am
;;hy                ; readability of scheme w/ speed of python
;;idris             ; a language you can depend on
json                ; At least it ain't XML
;;(java +meghanada) ; the poster child for carpal tunnel syndrome
javascript          ; all(hope(abandon(ye(who(enter(here))))))
;;julia             ; a better, faster MATLAB
;;kotlin            ; a better, slicker Java(Script)
latex               ; writing papers in Emacs has never been so fun
;;lean              ; for folks with too much to prove
ledger              ; an accounting system in Emacs
;;lua               ; one-based indices? one-based indices
markdown            ; writing docs for people to ignore
;;nim               ; python + lisp at the speed of c
;;nix               ; I hereby declare "nix geht mehr!"
;;ocaml             ; an objective camel
(org                ; organize your plain life in plain text
 +dragndrop
 +gnuplot
 +jupyter
 +noter
 +pomodoro
 +present
 +pretty
 +roam2)
;;php               ; perl's insecure younger brother
plantuml            ; diagrams for confusing people more
;;purescript        ; javascript, but functional
(python             ; beautiful is better than ugly
 +lsp
 +pyright           ; pyright as the LSP server for python
 +pyenv)
;;qt                ; the 'cutest' gui framework ever
;;racket            ; a DSL for DSLs
;;raku              ; the artist formerly known as perl6
;;rest              ; Emacs as a REST client
;;rst               ; ReST in peace
;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
;;rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
;;scala             ; java, but good
;;(scheme +guile)   ; a fully conniving family of lisps
(sh +fish)          ; she sells {ba,z,fi}sh shells on the C xor
;;sml
;;solidity          ; do you need a blockchain? No.
;;swift             ; who asked for emoji variables?
;;terra             ; Earth and Moon in alignment for performance.
web                 ; the tubes
yaml                ; JSON, but readable
;;zig               ; C, but simpler
#+end_src

**** Everything in Emacs

#+name: doom-email
#+begin_src emacs-lisp
(mu4e +org +gmail)
;;notmuch
;;(wanderlust +gmail)
#+end_src

#+name: doom-app
#+begin_src emacs-lisp
;;calendar
;;emms
everywhere          ; *leave* Emacs!? You must be joking
irc                 ; how neckbeards socialize
;;(rss +org)        ; emacs as an RSS reader
;;twitter           ; twitter client https://twitter.com/vnought
#+end_src

*** Packages

#+name: packages.el
#+begin_src emacs-lisp :tangle "packages.el" :noweb no-export :comments none
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.


;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;(package! some-package)
#+end_src

#+begin_src emacs-lisp :tangle "packages.el" :noweb no-export :comments none
;;;; Python
(package! py-autopep8)

;;;;; epub
(package! nov)

;;;; Sage
(package! sage-shell-mode)
(package! ob-sagemath)

;;;; Editing: input method
(package! pyim-basedict)

;;;; email
(package! org-mime)

;;; fix error for org-ref: "Cannot open load file: No such file or directory, citeproc"
(package! org-ref :recipe (:branch "org-ref-2"))
;; (package! citeproc)

;; When using org-roam via the `+roam` flag
(unpin! org-roam)

;;; org-roam-ui
(package! websocket)
(package! org-roam-ui :recipe (:host github :repo "org-roam/org-roam-ui" :files ("*.el" "out")))

;;;;;;;;; org-roam-bibtex (ORB)
(package! org-roam-bibtex :recipe (:host github :repo "org-roam/org-roam-bibtex"))

;;;;;;;;; orb-book
(package! orb-book :recipe (:host github :repo "junwei-wang/orb-book"))

;; When using bibtex-completion via the `biblio` module
(unpin! bibtex-completion helm-bibtex ivy-bibtex)

;;; ORB dependencies
(package! ivy-bibtex)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
;(package! another-package
;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;(package! this-package
;  :recipe (:host github :repo "username/repo"
;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;(package! builtin-package :recipe (:nonrecursive t))
;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;(package! builtin-package :pin "1a2b3c4d5e")


;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;(unpin! pinned-package)
;; ...or multiple packages
;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;(unpin! t)
#+end_src

** Extra configurations

#+begin_src
(defun doom/ediff-init-and-example ()
  "ediff the current `init.el' with the example in doom-emacs-dir"
  (interactive)
  (ediff-files (concat doom-private-dir "init.el")
               (concat doom-emacs-dir "init.example.el")))

(define-key! help-map
  "di"   #'doom/ediff-init-and-example
  )
#+end_src
** Editing
*** Input Method
#+begin_src emacs-lisp
(use-package! pyim
  :config
  ;; 激活 basedict 拼音词库
  (use-package! pyim-basedict
    :config (pyim-basedict-enable))

  ;; (setq default-input-method "pyim")

  ;; 我使用全拼
  (setq pyim-default-scheme 'quanpin)

  ;; 开启拼音搜索功能
  (pyim-isearch-mode 1)

  ;; 使用 pupup-el 来绘制选词框
  (setq pyim-page-tooltip 'popup)

  ;; 选词框显示5个候选词
  (setq pyim-page-length 8)

  ;; 让 Emacs 启动时自动加载 pyim 词库
  (add-hook 'emacs-startup-hook
            #'(lambda () (pyim-restart-1 t))))
#+end_src
** Diagrams
*** Ditaa
#+begin_src emacs-lisp
(setq org-ditaa-jar-path "/usr/local/Cellar/ditaa/0.11.0_1/libexec/ditaa-0.11.0-standalone.jar")
#+end_src
*** PlantUML
*** TikZ
** EBooks
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
#+end_src
* Tips
#+ATTR_HTML: :summary ""
| command                   | bind    | description |
|---------------------------+---------+-------------|
| =delete-horizontal-space= | =M-\=   |             |
| =just-one-space=          | =M-SPC= |             |
* Packages
#+ATTR_HTML: :summary ""
| package     | purpose              |
|-------------+----------------------|
| =ivy=       | searching            |
| =company=   | completion           |
| =flycheck=  | syntax checking      |
| =flyspell=  | spell checking       |
| =yasnippet= | snippets integration |
* Packages to explore
#+ATTR_HTML: :summary ""
| package    | description                    |
|------------+--------------------------------|
| =webpaste= | paste code to some web service |
| =imgbb=    | paste image to imgbb           |
