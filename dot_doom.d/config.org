#+TITLE: Doom Emacs Configuration
#+LAST_MODIFIED: [2021-04-07 Wed 07:59]
#+startup: fold
#+property: header-args:emacs-lisp :tangle yes :cache yes :results silent :comments link
#+property: header-args :tangle no :results silent

This liberate configuration for [[https://github.com/hlissner/doom-emacs][Doom Emacs]] is inspired by (aka. stolen from) [[https://tecosaur.github.io/emacs-config/config.html][tecosaur]].

* Prerequisites

** Install necessary softwares

#+begin_src shell
brew install tidy-html5   # format html
brew install clang-format # format c/cpp
brew install stfmt        # format shell
#+end_src

** Refresh environment
#+begin_src shell
doom env refresh
#+end_src

** Install

#+begin_src emacs-lisp :tangle no
(pdf-tools-install)      ;; for pdftools
(plantuml-download-jar)  ;; for plantuml
(irony-install-server)   ;; for c/c++
#+end_src

#+begin_src bash
cmake -DCMAKE_INSTALL_PREFIX\=/Users/junwei/.emacs.d/.local/etc/irony-server/ -DLIBCLANG_LIBRARY\=/usr/local/opt/llvm/lib/libclang.dylib -DLIBCLANG_INCLUDE_DIR\=/usr/local/opt/llvm/include /Users/junwei/.emacs.d/.local/straight/build-27.1/irony/server && cmake --build . --use-stderr --config Release --target install
#+end_src

* Rudimentary configuration
:LOGBOOK:
CLOCK: [2021-02-16 Tue 11:40]
:END:
Make this file run (slightly) faster with lexical binding (see [[https://nullprogram.com/blog/2016/12/22/][this blog post]] for more info).

#+begin_src emacs-lisp :comments no
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!
#+end_src

** Personal Information
It's useful to have some basic personal information

#+begin_src emacs-lisp
;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Junwei Wang"
      user-mail-address "junwei.wang@cryptoexperts.com")
#+end_src

Apparently this is used by ~GPG~, and all sorts of other things.

** Appearance
:LOGBOOK:
CLOCK: [2021-01-08 Fri 10:25]--[2021-01-08 Fri 10:50] =>  0:25
:END:

#+begin_src emacs-lisp
;; if started by emacs command or desktop file
;; open emacs in fullscreen
;; (toggle-frame-maximized)
;; (if (eq initial-window-system 'x)
;;     (toggle-frame-maximized)
;;   (toggle-frame-maximized))

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
(setq doom-font (font-spec :family "JetBrains Mono" :size 16 :weight 'semi-light)
      doom-variable-pitch-font (font-spec :family "Overpass" :size 17)
      doom-big-font (font-spec :family "JetBrains Mono" :size 23 :weight 'semi-light)
      doom-serif-font (font-spec :family "IBM Plex Mono" :weight 'light))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :weight bold))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-vibrant)

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)

;;;;;;;;;; beacon
(beacon-mode 1)
(setq beacon-color "#bf616a"
      beacon-size 80
      beacon-blink-delay 0.5
      beacon-blink-duration 0.5
      beacon-blink-when-focused t
      beacon-blink-when-point-moves-vertically t)
#+end_src

** Others

#+begin_src emacs-lisp
(setq projectile-project-search-path '("~/git/" "~/github/" "~/github-jwang/" "~/projects/" "~/workspace/"))

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.

;;
;; global

;; basic settings
(setq-default delete-by-moving-to-trash t         ; Delete files to trash
              tab-width 4                         ; Set width for tabs
              uniquify-buffer-name-style 'forward ; Uniquify buffer names
              window-combination-resize t         ; take new window space from all other windows (not just current)
              x-stretch-cursor t)                 ; Stretch cursor to the glyph width

(setq undo-limit 80000000                         ; Raise undo-limit to 80Mb
      evil-want-fine-undo t                       ; By default while in insert all changes are one big blob. Be more granular
      auto-save-default t                         ; Nobody likes to loose work, I certainly don't
      inhibit-compacting-font-caches t            ; When there are lots of glyphs, keep them in memory
      truncate-string-ellipsis "â€¦")               ; Unicode ellispis are nicer than "...", and also save /precious/ space

(delete-selection-mode 1)                         ; Replace selection when inserting text
(display-time-mode 1)                             ; Enable time in the mode-line
(unless (equal "Battery status not available"
               (battery))
  (display-battery-mode 1))                       ; On laptops it's nice to know how much power you have
(global-subword-mode 1)                           ; Iterate through CamelCase words

;; editing
(setq show-trailing-whitespace 1)
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;;;;;;;;;;;;; spelling
;; overwriting the value set by doom
(setq ispell-dictionary "en_US"
      ispell-personal-dictionary "~/.aspell.en.pws")

;;;;;;;;;;; neotree
(setq neo-hidden-regexp-list '("^\\." "\\.cs\\.meta$"
                               ;; Python
                               "\\.pyc$" "__pycache__" "\\.egg-info"
                               "~$" "^#.*#$" "\\.elc$"
                               ;; Latex
                               "\\.aux$" "\\.synctex\\.gz$" "\\.fls$" "\\.tdo$" "\\.bbl$" "\\.blg$")
      neo-window-fixed-size nil)

;;;;;;;;;;;;;;; calendar
(setq calendar-week-start-day 1)

;;;;;;;;;;;;;;; format
(setq +format-on-save-enabled-modes
      '(not emacs-lisp-mode  ; elisp's mechanisms are good enough
            sql-mode         ; sqlformat is currently broken
            web-mode))
(setq-hook! 'web-mode-hook +format-with 'prettier-prettify)
#+end_src


** LaTeX

#+begin_src emacs-lisp
;;;;;;;;;; LaTeX
;; indentation
;; (after! tex
;;   (setq-default TeX-master nil))
(after! latex
  (setq LaTeX-indent-level 2
        LaTeX-item-indent -2
        ;;  TeX-error-overview-open-after-TeX-run t
        ))
(mapc (lambda (mode) (add-hook 'LaTeX-mode-hook mode))
      (list 'auto-fill-mode
            'display-fill-column-indicator-mode))
(add-hook 'TeX-mode-hook (lambda () (set-fill-column 100)))
#+end_src

** Web

#+begin_src emacs-lisp
;;;;;;;;;; Web
;; indentation
(setq web-mode-markup-indent-offset 2
      web-mode-code-indent-offset 2
      web-mode-css-indent-offset 2)
#+end_src

** Python

#+begin_src emacs-lisp
;;;;;;;;;; Python
(mapc (lambda (mode) (add-hook 'python-mode-hook mode))
      (list 'py-autopep8-enable-on-save
            'display-fill-column-indicator-mode))
(add-hook 'python-mode-hook #'py-autopep8-enable-on-save)
(set-formatter! 'autopep8 'py-autopep8 :modes '(python-mode))
;; (add-hook 'python-mode-hook (lambda () (set-fill-column 100)))
#+end_src

** Org Mode

#+begin_src emacs-lisp
;;;;;;;;;; Orgmode
(setq org-directory "~/github/org/")
(setq org-image-actual-width nil)

;; (after! org
;;   (setq-local time-stamp-active t
;;               time-stamp-start "#\\+LAST_MODIFIED:[ \t]*"
;;               time-stamp-end "$"
;;               time-stamp-format "\[%Y-%02m-%02d %3a %02H:%02M\]")
;;   (add-hook 'before-save-hook 'time-stamp))

(add-hook 'org-mode-hook (lambda ()
                           (setq-local time-stamp-active t
                                       time-stamp-start "#\\+LAST_MODIFIED:[ \t]*"
                                       time-stamp-end "$"
                                       time-stamp-format "\[%Y-%02m-%02d %3a %02H:%02M\]")
                           (add-hook 'before-save-hook 'time-stamp nil 'local)))
#+end_src

*** Agenda

#+begin_src emacs-lisp
(setq org-agenda-custom-commands
      '(("B" "Biweekly Team Meeting"
         ((agenda "" ((org-agenda-span 14)
                      (org-agenda-start-day "-13d"))))
         ((org-agenda-compact-blocks t))) ;; options set here apply to the entire block
        ("x" ""
         ((agenda "" ((org-agenda-span 1))))
         ((org-agenda-compact-blocks t)))
        ))
#+end_src

*** Noter

#+begin_src emacs-lisp
(setq org-noter-always-create-frame nil)
#+end_src

*** LaTeX
#+begin_src emacs-lisp
;;;;;;;;;; Org LaTeX
;;; https://emacs.stackexchange.com/a/41187
;;;; (add-to-list 'org-latex-packages-alist "~/github/org/latex/mymacros.sty")
#+end_src

*** Org Roam

#+begin_src emacs-lisp
;;;;;;;;;; Org-Roam
(setq org-roam-capture-templates
      '(("d" "default" plain
         (function org-roam-capture--get-point)
         "%?"
         :file-name "%<%Y%m%d>-${slug}"
         :head "#+TITLE: ${title}\n#+CREATED: %U\n#+LAST_MODIFIED: %U\n#+ROAM_ALIAS:\n#+ROAM_TAGS:\n\n"
         :unnarrowed t)
        ("D" "default copy" plain
         (function org-roam-capture--get-point)
         "%?"
         :file-name "%<%Y%m%d%H%M%S>-${slug}"
         :head "#+TITLE: ${title}\n#+CREATED: %U\n#+LAST_MODIFIED: %U\n\n"
         :unnarrowed t)))

(setq org-roam-graph-viewer "/Applications/Firefox.app/Contents/MacOS/firefox")
(use-package! org-roam-server
  :config
  (setq org-roam-server-host "127.0.0.1"
        org-roam-server-port 8080
        org-roam-server-authenticate nil
        org-roam-server-export-inline-images t
        org-roam-server-serve-files nil
        org-roam-server-served-file-extensions '("pdf" "mp4" "ogv")
        org-roam-server-network-poll t
        org-roam-server-network-arrows nil
        org-roam-server-network-label-truncate t
        org-roam-server-network-label-truncate-length 60
        org-roam-server-network-label-wrap-length 20))

;; issue: https://github.com/org-roam/org-roam-server/issues/115
(defun org-roam-server-open ()
  "Ensure the server is active, then open the roam graph."
  (interactive)
  (smartparens-global-mode -1)
  (org-roam-server-mode 1)
  (browse-url-xdg-open (format "http://localhost:%d" org-roam-server-port))
  (smartparens-global-mode 1))

;; automatically enable server-mode
(after! org-roam
  (smartparens-global-mode -1)
  (org-roam-server-mode)
  (smartparens-global-mode 1)
  (org-roam-bibtex-mode))

;; (use-package! org-roam-bibtex
;;   :after org-roam
;;   :hook (org-roam-mode . org-roam-bibtex-mode))

(setq orb-preformat-keywords '("year" "citekey" "title" "author")
      orb-templates '(("r" "ref" plain (function org-roam-capture--get-point)
                       (file "~/github/org/templates/orb.org")
                       :file-name "biblio/${citekey}"
                       :head "#+TITLE: ${year} - [${citekey}] - ${title} -- ${author}\n"
                       :unnarrowed t)))

;;;;;;;;; Bibliography
;;; helm-bibtex
(setq bibtex-completion-bibliography '("~/.cb/cryptobib/crypto.bib"
                                       "~/github/org/biblio/thesis.bib"
                                       "~/github/org/biblio/book.bib"
                                       "~/github/org/biblio/misc.bib"
                                       "~/github/org/biblio/temp.bib"
                                       "~/github/org/biblio/tifs.bib"
                                       "~/github/org/biblio/crxwork/wheely.bib")
      bibtex-completion-library-path '("~/github/org/biblio/pdfs"))

;;; org-ref
(setq reftex-default-bibliography bibtex-completion-bibliography
      ;; show broken links is slow in large files
      org-ref-show-broken-links nil)

;; org-ref
(setq org-ref-completion-library 'org-ref-ivy-cite)

;; see org-ref for use of these variables
(setq org-ref-bibliography-notes "~/github/org/biblio/notes.org"
      org-ref-default-bibliography bibtex-completion-bibliography
      org-ref-pdf-directory "~/github/org/biblio/pdfs")

;;;;;;;;;; Org-Noter
(setq org-noter-notes-search-path '(org-directory
                                    "~/github/org/roam/biblio"))
#+end_src

** Email

#+begin_src emacs-lisp
;;;;;;;;; MU4E
(setq mu4e-maildir (expand-file-name "~/.mbsync"))
(setq +mu4e-mu4e-mail-path (expand-file-name "~/.mbsync"))

(after! mu4e
  ;; get mail
  (setq
   ;; mu4e-get-mail-command "mbsync -c ~/.mbsyncrc -a"
   ;; mu4e-html2text-command "w3m -T text/html" ;;using the default mu4e-shr2text
   mu4e-view-prefer-html t
   mu4e-update-interval 180
   mu4e-headers-auto-update t
   ;; mu4e-compose-signature-auto-include nil
   mu4e-compose-format-flowed t)
  (add-to-list 'mu4e-view-actions
               '("ViewInBrowser" . mu4e-action-view-in-browser) t))
;; enable inline images
(setq mu4e-view-show-images t)
;; use imagemagick, if available
(when (fboundp 'imagemagick-register-types)
  (imagemagick-register-types))


;; every new email composition gets its own frame!
(setq mu4e-compose-in-new-frame t)

;; don't save message to Sent Messages, IMAP takes care of this
(setq mu4e-sent-messages-behavior 'delete)

(add-hook 'mu4e-view-mode-hook #'visual-line-mode)

;; <tab> to navigate to links, <RET> to open them in browser
(add-hook 'mu4e-view-mode-hook
          (lambda()
            ;; try to emulate some of the eww key-bindings
            (local-set-key (kbd "<RET>") 'mu4e~view-browse-url-from-binding)
            (local-set-key (kbd "<tab>") 'shr-next-link)
            (local-set-key (kbd "<backtab>") 'shr-previous-link)))

;; (set-email-account! "gmail-wakemecn"
;;                     '((mu4e-sent-folder       . "/gmail-wakemecn/Sent Mail")
;;                       (mu4e-drafts-folder     . "/gmail-wakemecn/Drafts")
;;                       (mu4e-trash-folder      . "/gmail-wakemecn/Trash")
;;                       (mu4e-refile-folder     . "/gmail-wakemecn/All Mail")
;;                       (smtpmail-smtp-user     . "wakemecn@gmail.com")
;;                       (mu4e-compose-signature . "\n\nBest regards,\nJunwei Wang"))
;;                     t)

;; (set-email-account! "CRX"
;;                     '((mu4e-sent-folder       . "/CRX/Sent Mail")
;;                       (mu4e-drafts-folder     . "/CRX/Drafts")
;;                       (mu4e-trash-folder      . "/CRX/Trash")
;;                       (mu4e-refile-folder     . "/CRX/All Mail")
;;                       (smtpmail-smtp-user     . "junwei.wang@cryptoexperts.com")
;;                       (mu4e-compose-signature . "\n\nBest regards,\nJunwei Wang"))
;;                     nil)
;; convert org mode to HTML automatically
(setq org-mu4e-convert-to-html t)

;;from vxlabs config
;; show full addresses in view message (instead of just names)
;; toggle per name with M-RET
(setq mu4e-view-show-addresses 't)

;; don't ask when quitting
(setq mu4e-confirm-quit nil)

;; mu4e-context
(setq mu4e-context-policy 'pick-first)
(setq mu4e-compose-context-policy 'always-ask)

;;set up queue for offline email
;;use mu mkdir  ~/.maildir/$ACCOUNT/queue to set up first
(setq smtpmail-queue-mail nil)  ;; start in normal mode

(after! mu4e-context
  :config
  (setq mu4e-contexts
        (list
         (make-mu4e-context
          :name "wakemecn" ;;for gmail-wakemecn
          :enter-func (lambda () (mu4e-message "Entering context [wakemecn]"))
          :leave-func (lambda () (mu4e-message "Leaving context [wakemecn]"))
          :match-func (lambda (msg)
                        (when msg
                          (mu4e-message-contact-field-matches
                           msg '(:from :to :cc :bcc) "wakemecn@gmail.com")))
          :vars '((user-mail-address . "wakemecn@gmail.com")
                  (user-full-name . "Junwei Wang")
                  (mu4e-sent-folder . "/gmail-wakemecn/Sent Mail")
                  (mu4e-drafts-folder . "/gmail-wakemecn/drafts")
                  (mu4e-trash-folder . "/gmail-wakemecn/Trash")
                  (mu4e-compose-signature . (concat "Formal Signature\n" "Emacs 27.1, org-mode 10, mu4e 1.4\n"))
                  (mu4e-compose-format-flowed . t)
                  (smtpmail-queue-dir . "~/.maildir/gmail-wakemecn/queue/cur")
                  (message-send-mail-function . smtpmail-send-it)
                  (smtpmail-smtp-user . "wakemecn")
                  (smtpmail-starttls-credentials . (("smtp.gmail.com" 587 nil nil)))
                  (smtpmail-auth-credentials . (expand-file-name "~/.authinfo.gpg"))
                  (smtpmail-default-smtp-server . "smtp.gmail.com")
                  (smtpmail-smtp-server . "smtp.gmail.com")
                  (smtpmail-smtp-service . 587)
                  (smtpmail-debug-info . t)
                  (smtpmail-debug-verbose . t)
                  (mu4e-maildir-shortcuts . ( ("/gmail-wakemecn/INBOX"     . ?i)
                                              ("/gmail-wakemecn/Sent Mail" . ?s)
                                              ("/gmail-wakemecn/Trash"     . ?t)
                                              ("/gmail-wakemecn/All Mail"  . ?a)
                                              ("/gmail-wakemecn/Starred"   . ?r)
                                              ("/gmail-wakemecn/drafts"    . ?d)
                                              ))))
         (make-mu4e-context
          :name "CRX" ;; for CRX mail
          :enter-func (lambda () (mu4e-message "Entering context [CRX]"))
          :leave-func (lambda () (mu4e-message "Leaving context [CRX]"))
          :match-func (lambda (msg)
                        (when msg
                          (mu4e-message-contact-field-matches
                           msg '(:from :to :cc :bcc) "junwei.wang@cryptoexperts.com")))
          :vars '((user-mail-address . "junwei.wang@cryptoexperts.com")
                  (user-full-name . "Junwei Wang")
                  (mu4e-sent-folder . "/CRX/Sent Mail")
                  (mu4e-drafts-folder . "/CRX/drafts")
                  (mu4e-trash-folder . "/CRX/Trash")
                  (mu4e-compose-signature . (concat "Informal Signature\n" "Emacs is awesome!\n"))
                  (mu4e-compose-format-flowed . t)
                  (smtpmail-queue-dir . "~/.maildir/CRX/queue/cur")
                  (message-send-mail-function . smtpmail-send-it)
                  (smtpmail-smtp-user . "junwei.wang@cryptoexperts.com")
                  (smtpmail-starttls-credentials . (("smtp.gmail.com" 587 nil nil)))
                  (smtpmail-auth-credentials . (expand-file-name "~/.authinfo.gpg"))
                  (smtpmail-default-smtp-server . "smtp.gmail.com")
                  (smtpmail-smtp-server . "smtp.gmail.com")
                  (smtpmail-smtp-service . 587)
                  (smtpmail-debug-info . t)
                  (smtpmail-debug-verbose . t)
                  (mu4e-maildir-shortcuts . ( ("/CRX/INBOX"     . ?i)
                                              ("/CRX/Sent Mail" . ?s)
                                              ("/CRX/Trash"     . ?t)
                                              ("/CRX/All Mail"  . ?a)
                                              ("/CRX/Starred"   . ?r)
                                              ("/CRX/drafts"    . ?d)
                                              )))))))
#+end_src


** Doom configuration

*** Modules
:PROPERTIES:
:header-args:emacs-lisp: :tangle no
:END:

#+name: init.el
#+begin_src emacs-lisp :tangle "init.el" :noweb no-export :comments none
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a "Module Index" link where you'll find
;;      a comprehensive list of Doom's modules and what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).

(doom! :input
       <<doom-input>>

       :completion
       <<doom-completion>>

       :ui
       <<doom-ui>>

       :editor
       <<doom-editor>>

       :emacs
       <<doom-emacs>>

       :term
       <<doom-term>>

       :checkers
       <<doom-checkers>>

       :tools
       <<doom-tools>>

       :os
       <<doom-os>>

       :lang
       <<doom-lang>>

       :email
       <<doom-email>>

       :app
       <<doom-app>>

       :config
       literate
       (default +bindings +smartparens))
#+end_src

**** Interface
#+name: doom-input
#+begin_src emacs-lisp
chinese
;;japanese
;;layout            ; auie,ctsrnm is the superior home row
#+end_src

#+name: doom-completion
#+begin_src emacs-lisp
company           ; the ultimate code completion backend
;;helm              ; the *other* search engine for love and life
;;ido               ; the other *other* search engine...
ivy               ; a search engine for love and life
#+end_src

#+name: doom-ui
#+begin_src emacs-lisp
;;deft              ; notational velocity for Emacs
doom                ; what makes DOOM look the way it does
doom-dashboard      ; a nifty splash screen for Emacs
doom-quit           ; DOOM quit-message prompts when you quit Emacs
(emoji +unicode)    ; ðŸ™‚
fill-column         ; a `fill-column' indicator
hl-todo             ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
;;hydra
;;indent-guides     ; highlighted indent columns
;;ligatures         ; ligatures and symbols to make your code pretty again
minimap             ; show a map of the code on the side
modeline            ; snazzy, Atom-inspired modeline, plus API
;;nav-flash         ; blink cursor line after big motions
neotree             ; a project drawer, like NERDTree for vim
ophints             ; highlight the region an operation acts on
(popup +defaults)   ; tame sudden yet inevitable temporary windows
;;tabs              ; a tab bar for Emacs
;;treemacs          ; a project drawer, like neotree but cooler
unicode             ; extended unicode support for various languages
vc-gutter           ; vcs diff in the fringe
vi-tilde-fringe     ; fringe tildes to mark beyond EOB
;;window-select     ; visually switch windows
workspaces          ; tab emulation, persistence & separate workspaces
;;zen               ; distraction-free coding or writing
#+end_src

#+name: doom-editor
#+begin_src emacs-lisp
(evil +everywhere)  ; come to the dark side, we have cookies
file-templates      ; auto-snippets for empty files
fold                ; (nigh) universal code folding
(format +onsave)    ; automated prettiness
;;god               ; run Emacs commands without modifier keys
;;lispy             ; vim for lisp, for people who don't like vim
;;multiple-cursors  ; editing in many places at once
;;objed             ; text object editing for the innocent
;;parinfer          ; turn lisp into python, sort of
;;rotate-text       ; cycle region at point between text candidates
snippets            ; my elves. They type so I don't have to
;;word-wrap         ; soft wrapping with language-aware indent
#+end_src

#+name: doom-emacs
#+begin_src emacs-lisp
(dired +icons)      ; making dired pretty [functional]
electric            ; smarter, keyword-based electric-indent
(ibuffer +icons)    ; interactive buffer management
undo                ; persistent, smarter undo for your inevitable mistakes
vc                  ; version-control and Emacs, sitting in a tree
#+end_src

#+name: doom-term
#+begin_src emacs-lisp
eshell              ; the elisp shell that works everywhere
;;shell             ; simple shell REPL for Emacs
;;term              ; basic terminal emulator for Emacs
;;vterm             ; the best terminal emulation in Emacs
#+end_src

#+name: doom-checkers
#+begin_src emacs-lisp
(syntax             ; tasing you for every semicolon you forget
 +everywhere)
(spell              ; tasing you for misspelling mispelling
 +aspell            ; use aspell as a backend for correcting words.
 +everywhere)       ; spell check in programming modes as well (in comments)
grammar             ; tasing grammar mistake every you make
#+end_src

#+name: doom-tools
#+begin_src emacs-lisp
;;ansible
biblio
;;debugger          ; FIXME stepping through code, to help you add bugs
;;direnv
docker
editorconfig        ; let someone else argue about tabs vs spaces
;;ein               ; tame Jupyter notebooks with emacs
(eval +overlay)     ; run code, run (also, repls)
;;gist              ; interacting with github gists
lookup              ; navigate your code and its documentation
lsp
magit               ; a git porcelain for Emacs
make                ; run make tasks from Emacs
;;pass              ; password manager for nerds
pdf                 ; pdf enhancements
;;prodigy           ; FIXME managing external services & code builders
;;rgb               ; creating color strings
;;taskrunner        ; taskrunner for all your projects
;;terraform         ; infrastructure as code
;;tmux              ; an API for interacting with tmux
;;upload            ; map local to remote projects via ssh/ftp
#+end_src

#+name: doom-os
#+begin_src emacs-lisp
(:if IS-MAC macos)  ; improve compatibility with macOS
tty                 ; improve the terminal Emacs experience
#+end_src
**** Language support
#+name: doom-lang
#+begin_src emacs-lisp
;;agda              ; types of types of types of types...
cc                  ; C/C++/Obj-C madness
;;clojure           ; java with a lisp
;;common-lisp       ; if you've seen one lisp, you've seen them all
;;coq               ; proofs-as-programs
;;crystal           ; ruby at the speed of c
;;csharp            ; unity, .NET, and mono shenanigans
data                ; config/data formats
;;(dart +flutter)   ; paint ui and not much else
;;elixir            ; erlang done right
;;elm               ; care for a cup of TEA?
emacs-lisp          ; drown in parentheses
;;erlang            ; an elegant language for a more civilized age
;;ess               ; emacs speaks statistics
;;faust             ; dsp, but you get to keep your soul
;;fsharp            ; ML stands for Microsoft's Language
;;fstar             ; (dependent) types and (monadic) effects and Z3
;;gdscript          ; the language you waited for
;;(go +lsp)         ; the hipster dialect
;;(haskell +dante)  ; a language that's lazier than I am
;;hy                ; readability of scheme w/ speed of python
;;idris             ; a language you can depend on
json                ; At least it ain't XML
;;(java +meghanada) ; the poster child for carpal tunnel syndrome
javascript          ; all(hope(abandon(ye(who(enter(here))))))
;;julia             ; a better, faster MATLAB
kotlin              ; a better, slicker Java(Script)
latex               ; writing papers in Emacs has never been so fun
;;lean
;;factor
;;ledger            ; an accounting system in Emacs
;;lua               ; one-based indices? one-based indices
markdown            ; writing docs for people to ignore
;;nim               ; python + lisp at the speed of c
;;nix               ; I hereby declare "nix geht mehr!"
;;ocaml             ; an objective camel
(org +gnuplot +pomodoro +present +pretty +roam +noter)   ; organize your plain life in plain text
;;php               ; perl's insecure younger brother
plantuml            ; diagrams for confusing people more
;;purescript        ; javascript, but functional
python              ; beautiful is better than ugly
;;qt                ; the 'cutest' gui framework ever
;;racket            ; a DSL for DSLs
;;raku              ; the artist formerly known as perl6
;;rest              ; Emacs as a REST client
;;rst               ; ReST in peace
;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
;;rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
;;scala             ; java, but good
;;scheme            ; a fully conniving family of lisps
(sh +fish)          ; she sells {ba,z,fi}sh shells on the C xor
;;sml
;;solidity          ; do you need a blockchain? No.
;;swift             ; who asked for emoji variables?
;;terra             ; Earth and Moon in alignment for performance.
web                 ; the tubes
yaml                ; JSON, but readable
#+end_src

**** Everything in Emacs

#+name: doom-email
#+begin_src emacs-lisp
(mu4e +org +gmail)
;;notmuch
;;(wanderlust +gmail)
#+end_src

#+name: doom-app
#+begin_src emacs-lisp
;;calendar
;;irc               ; how neckbeards socialize
;;(rss +org)        ; emacs as an RSS reader
;;twitter           ; twitter client https://twitter.com/vnought
#+end_src


*** Packages

** Extra configurations

#+begin_src
(defun doom/ediff-init-and-example ()
  "ediff the current `init.el' with the example in doom-emacs-dir"
  (interactive)
  (ediff-files (concat doom-private-dir "init.el")
               (concat doom-emacs-dir "init.example.el")))

(define-key! help-map
  "di"   #'doom/ediff-init-and-example
  )
#+end_src


* Existing issues
** aspell mark most words incorrect

- see https://github.com/hlissner/doom-emacs/issues/4009
